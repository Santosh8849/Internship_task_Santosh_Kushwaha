CREATE DATABASE Food_booking;
USE Food_booking;
-- drop database Food_booking;

-- 1. Restaurants Table
CREATE TABLE Restaurants (
    RestaurantID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL,
    City VARCHAR(50) NOT NULL,
    CuisineType VARCHAR(50) NOT NULL,
    Rating DECIMAL(2, 1),
    AverageCostForTwo DECIMAL(10, 2)
);

-- 2. Customers Table
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY AUTO_INCREMENT,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    Phone VARCHAR(15) UNIQUE NOT NULL,
    City VARCHAR(50),
    JoinDate DATE
);

-- 3. Orders Table
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY AUTO_INCREMENT,
    CustomerID INT,
    RestaurantID INT,
    OrderDate DATE,
    OrderAmount DECIMAL(10, 2),
    OrderStatus ENUM('Delivered', 'Cancelled', 'Pending') NOT NULL,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);

-- 4. Reviews Table
CREATE TABLE Reviews (
    ReviewID INT PRIMARY KEY AUTO_INCREMENT,
    CustomerID INT,
    RestaurantID INT,
    Rating DECIMAL(2, 1) CHECK (Rating BETWEEN 0 AND 5),
    Comment TEXT,
    ReviewDate DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);

-- 5. Payments Table
CREATE TABLE Payments (
    PaymentID INT PRIMARY KEY AUTO_INCREMENT,
    OrderID INT,
    PaymentMethod ENUM('Card', 'Cash', 'Wallet') NOT NULL,
    Amount DECIMAL(10, 2),
    PaymentDate DATE,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

-- Restaurants Data
INSERT INTO Restaurants (Name, City, CuisineType, Rating, AverageCostForTwo) VALUES
('Spice Symphony', 'Mumbai', 'Indian', 4.6, 800),
('La Pinoz', 'Mumbai', 'Italian', 4.4, 1200),
('Dragon Express', 'Delhi', 'Chinese', 4.3, 600),
('Pasta Palace', 'Mumbai', 'Italian', 4.8, 1500),
('Biryani Blues', 'Delhi', 'Indian', 4.2, 700);

-- Customers Data
INSERT INTO Customers (FirstName, LastName, Phone, City, JoinDate) VALUES
('Rahul', 'Sharma', '9876543210', 'Mumbai', '2023-01-15'),
('Priya', 'Verma', '9876543211', 'Delhi', '2023-02-20'),
('Ankit', 'Singh', '9876543212', 'Mumbai', '2023-03-10'),
('Sneha', 'Kapoor', '9876543213', 'Mumbai', '2023-04-05'),
('Rohan', 'Mehta', '9876543214', 'Delhi', '2023-05-01');

-- Orders Data
INSERT INTO Orders (CustomerID, RestaurantID, OrderDate, OrderAmount, OrderStatus) VALUES
(1, 1, '2023-07-10', 900, 'Delivered'),
(2, 3, '2023-07-12', 650, 'Delivered'),
(3, 2, '2023-07-14', 1250, 'Cancelled'),
(4, 4, '2023-07-16', 1550, 'Delivered'),
(5, 1, '2023-07-18', 800, 'Pending');

-- Reviews Data
INSERT INTO Reviews (CustomerID, RestaurantID, Rating, Comment, ReviewDate) VALUES
(1, 1, 5.0, 'Amazing food and service!', '2023-07-11'),
(2, 3, 4.0, 'Great Chinese dishes!', '2023-07-13'),
(4, 4, 5.0, 'Best pasta I have ever had!', '2023-07-17');

-- Payments Data
INSERT INTO Payments (OrderID, PaymentMethod, Amount, PaymentDate) VALUES
(1, 'Card', 900, '2023-07-10'),
(2, 'Wallet', 650, '2023-07-12'),
(4, 'Cash', 1550, '2023-07-16');

-- Queries from Assignment

-- 1. Retrieve the names and locations of restaurants with a rating of 4.5 or higher.
SELECT Name, City 
FROM Restaurants 
WHERE Rating >= 4.5;

-- 2. Find the total number of orders placed by each customer.
SELECT CustomerID, COUNT(OrderID) AS TotalOrders 
FROM Orders 
GROUP BY CustomerID;

-- 3. List all restaurants offering "Italian" cuisine in "Mumbai".
SELECT Name 
FROM Restaurants 
WHERE CuisineType = 'Italian' AND City = 'Mumbai';

-- 4. Calculate the total revenue generated by each restaurant from completed orders.
SELECT RestaurantID, SUM(OrderAmount) AS TotalRevenue 
FROM Orders 
WHERE OrderStatus = 'Delivered' 
GROUP BY RestaurantID;

-- 5. Retrieve the most recent order placed by each customer.
SELECT CustomerID, MAX(OrderDate) AS MostRecentOrder 
FROM Orders 
GROUP BY CustomerID;

-- 6. List customers who have not placed any orders yet.
SELECT c.CustomerID, c.FirstName, c.LastName 
FROM Customers c 
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID 
WHERE o.OrderID IS NULL;

-- 7. Identify the most reviewed restaurants.
SELECT RestaurantID, COUNT(ReviewID) AS TotalReviews 
FROM Reviews 
GROUP BY RestaurantID 
ORDER BY TotalReviews DESC 
LIMIT 1;

-- 8. Find the most preferred payment method.
SELECT PaymentMethod, COUNT(PaymentID) AS MethodCount 
FROM Payments 
GROUP BY PaymentMethod 
ORDER BY MethodCount DESC 
LIMIT 1;

-- 9. List the top 5 restaurants by total revenue.
SELECT r.Name, SUM(o.OrderAmount) AS TotalRevenue 
FROM Restaurants r 
JOIN Orders o ON r.RestaurantID = o.RestaurantID 
WHERE o.OrderStatus = 'Delivered' 
GROUP BY r.RestaurantID 
ORDER BY TotalRevenue DESC 
LIMIT 5;

-- 10. Show the details of all cancelled orders along with the customer's and restaurant's names.
SELECT o.OrderID, c.FirstName, c.LastName, r.Name AS RestaurantName, o.OrderDate, o.OrderAmount 
FROM Orders o 
JOIN Customers c ON o.CustomerID = c.CustomerID 
JOIN Restaurants r ON o.RestaurantID = r.RestaurantID 
WHERE o.OrderStatus = 'Cancelled';
